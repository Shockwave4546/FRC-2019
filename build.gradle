import edu.wpi.first.gradlerio.frc.FRCPlugin
import edu.wpi.first.toolchain.NativePlatforms

plugins {
    id "java"
    id "edu.wpi.first.GradleRIO" version "2019.2.1"
    id "cpp"
    id "edu.wpi.first.GradleJni" version "0.3.1"
}

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

def ROBOT_MAIN_CLASS = "frc.robot.Main"

// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project EmbeddedTools.
deploy {
    targets {
        roboRIO("roborio") {
            // Team number is loaded either from the .wpilib/wpilib_preferences.json
            // or from command line. If not found an exception will be thrown.
            // You can use getTeamOrDefault(team) instead of getTeamNumber if you
            // want to store a team number in this file.
            team = frc.getTeamNumber()
        }
    }
    artifacts {
        frcJavaArtifact('frcJava') {
            targets << "roborio"
            // Debug can be overridden by command line, for use with VSCode
            debug = frc.getDebugOrDefault(false)
        }
        // Built in artifact to deploy arbitrary files to the roboRIO.
        fileTreeArtifact('frcStaticFileDeploy') {
            // The directory below is the local directory to deploy
            files = fileTree(dir: 'src/main/deploy')
            // Deploy to RoboRIO target, into /home/lvuser/deploy
            targets << "roborio"
            directory = '/home/lvuser/deploy'
        }
        fileCollectionArtifact('sharedObjectFileCollectionArtifact') {
            files = files(['libs/libpixy2.so', 'libs/libusb-1.0.so'])
            targets << "roborio"
            directory = FRCPlugin.LIB_DEPLOY_DIR
        }
        nativeArtifact('pixy2_usb') {
            targetPlatform = NativePlatforms.roborio
            targets << "roborio"
            directory = FRCPlugin.LIB_DEPLOY_DIR
            buildType = 'release'
        }
    }
}

// Set this to true to enable desktop support.
def includeDesktopSupport = false

// Maven central needed for JUnit
repositories {
    mavenCentral()
}

// Defining my dependencies. In this case, WPILib (+ friends), and vendor libraries.
// Also defines JUnit 4.
dependencies {
    compile wpi.deps.wpilib()
    compile wpi.deps.vendor.java()
    nativeZip wpi.deps.vendor.jni(wpi.platforms.roborio)
    nativeDesktopZip wpi.deps.vendor.jni(wpi.platforms.desktop)
    testCompile 'junit:junit:4.12'
}

// Setting up my Jar File. In this case, adding all libraries into the main jar ('fat jar')
// in order to make them all available at runtime. Also adding the manifest so WPILib
// knows where to look for our Robot Class.
jar {
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    manifest edu.wpi.first.gradlerio.GradleRIOPlugin.javaManifest(ROBOT_MAIN_CLASS)
}

model {
    repositories {
        libs(PrebuiltLibraries) {
            "pixy2" {
                headers.srcDir "include"
                binaries.withType(SharedLibraryBinary) {
                    sharedLibraryFile = file("libs/libpixy2.so")
                }
            }
            "libusb-1.0" {
                headers.srcDir "include"
                binaries.withType(SharedLibraryBinary) {
                    sharedLibraryFile = file("libs/libusb-1.0.so")
                }
            }
        }
    }

    components {
        pixy2_usb(JniNativeLibrarySpec) { // Use JniNativeLibrarySpec to get a JNI library
            targetPlatform wpi.platforms.roborio
            enableCheckTask true // Set to true to enable a JNI check task. This will search all generated JNI headers, and check to ensure their symbols exist in the native library
            javaCompileTasks << compileJava // set javaCompileTasks to any java compile tasks that contain your JNI classes. It is a list of tasks
            jniCrossCompileOptions << JniCrossCompileOptions('athena')

            binaries.all {
                cppCompiler.args '-g', '-Wall', '-D__LINUX__'
            }

            sources.cpp {
                source {
                    srcDir 'src/main/jni/cpp'
                    include '**/*.cpp', '**/*.c'
                }
                exportedHeaders {
                    srcDirs 'src/main/jni/include','src/main/jni/include/Pixy','src/main/resources/arm-linux-jni/linux','src/main/resources/libusb-1.0'
                    if (project.hasProperty('generatedHeaders')) {
                        srcDir generatedHeaders
                    }
                    include '**/*.h'
                }
                lib library: "pixy2"
                lib library: "libusb-1.0"
            }
            // Defining my dependencies. In this case, WPILib (+ friends), and vendor libraries.
            useLibrary(it, "wpilib")
        }
    }
}

